plugins {
	id 'fabric-loom'
	id 'maven-publish'
	id "com.jfrog.bintray"
	id "com.github.fudge.forgedflowerloom" version "2.0.0"
}

def total_version = "$mod_version+$minecraft_version"
def githubUrl = "https://github.com/$github_repo"

archivesBaseName = mod_id
version = total_version
group = project.maven_group

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


repositories {
    mavenCentral()
//    maven { url "https://minecraft.curseforge.com/api/maven/" }
//	maven { url 'http://maven.sargunv.s3-website-us-west-2.amazonaws.com/' }
}
minecraft {
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
	test{
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modApi "net.fabricmc:fabric-loader:${project.loader_version}"

	testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.2"
	testImplementation "org.junit.jupiter:junit-jupiter-params:5.4.2"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:5.4.2"

	testmodImplementation sourceSets.main.output
	modRuntime("net.fabricmc.fabric-api:fabric-api:$fabric_version")

//	modRuntime "io.github.prospector.modmenu:ModMenu:1.6.2-92"
//	modRuntime "foamfix-for-minecraft:foamfix:0.12.1"
//	modRuntime "me.shedaniel:RoughlyEnoughItems:2.9.4+build.129"
//	modRuntime "me.sargunvohra.mcmods:auto-config:1.1.2+mc1.14.1"
//	modRuntime "informed-load-fabric:informedload:2.1.0:1.14"
}

test { useJUnitPlatform() }

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}
jar { from "LICENSE" }
def pomConfig = {
	licenses {
		license {
			name project.license
		}
	}
	developers {
		developer {
			id "fudge"
			name "natan"
			email "natandestroyer100@gmail.com"
		}
	}

	scm {
		url githubUrl
	}
}


// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}


jar {
	from "LICENSE"
}

bintray {
	user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
	key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
	publications = ["MavenPublication"]
	publish = true //[Default: false] Whether version should be auto published after an upload
	pkg {
		repo = "libs"
		name = mod_id
		desc = mod_description
		websiteUrl = githubUrl
		issueTrackerUrl = "$githubUrl/issues"
		githubRepo = github_repo //Optional Github repository
		githubReleaseNotesFile = 'README.md' //Optional Github readme file
		licenses = [license]
		vcsUrl = githubUrl
		version {
			name = total_version
			released = new Date()
		}
	}

}


publishing {
	publications {
		MavenPublication(MavenPublication) {
			artifact(remapJar)

			artifact(sourcesJar) {
				classifier = "sources"
				builtBy remapSourcesJar
			}
			groupId maven_group
			artifactId mod_id
			version total_version
			pom.withXml {
				def root = asNode()
				root.appendNode('description', mod_description)
				root.appendNode('name', mod_id)
				root.appendNode('url', githubUrl)
				root.children().last() + pomConfig
			}
		}
	}
}


Properties properties = new Properties()
properties.put("total_version", total_version)


task updateTemplate(type: Copy) {
	group = "template"
	description = "Switches out variables like \$total_version in .template.md files, and copies the results into .md files."
	from(rootDir)
	include("**/*.template.md")
	filesMatching("**/*.template.md") {
		def extensionLength = ".template.md".length()

		name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
		expand(properties)
	}
	destinationDir = rootDir
}

bintrayUpload.dependsOn updateTemplate
bintrayUpload.dependsOn build
bintrayUpload.dependsOn generatePomFileForMavenPublicationPublication
